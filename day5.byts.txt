1.TWO SUM(LEETCODE NO:1)

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int x=-1,y=-1;
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++){
                if((nums[i]+nums[j])==target){
                    x=i;
                    y=j;
                    break;
                }

            }
            if(x!=-1)
            break;
        }
        int [] ans={x,y};
        return ans;
        
    }
}
---------------------------------------------------------------------------------------------
2. 3 SUM(LEETCODE NO:15)

public class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        if(nums.length < 3) return result;
        Arrays.sort(nums);
        int i = 0;
        while(i < nums.length - 2) {
            if(nums[i] > 0) break;
            int j = i + 1;
            int k = nums.length - 1;
            while(j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                if(sum == 0) result.add(Arrays.asList(nums[i], nums[j], nums[k]));
                if(sum <= 0) while(nums[j] == nums[++j] && j < k);
                if(sum >= 0) while(nums[k--] == nums[k] && j < k);
            }
            while(nums[i] == nums[++i] && i < nums.length - 2);
        }
        return result;
    }
}
------------------------------------------------------------------------------------------------------
3. VALID ANAGRAM(LEETCODE NO:242)

class Solution {
    public boolean isAnagram(String s, String t) {
        if(s.length() != t.length())
            return false;
        int[] nums = new int[26];
        for(char c : s.toCharArray())
            nums[c - 'a']++;
        for(char c : t.toCharArray())
            if(--nums[c - 'a'] < 0)
                return false;
        return true;
    }
}
-----------------------------------------------------------------------------------------------------------
4.REVERSE STRING(LEETCODE NO:344)

public class Solution {
    public String reverseString(String s) {
        char[] word = s.toCharArray();
        int i = 0;
        int j = s.length() - 1;
        while (i < j) {
            char temp = word[i];
            word[i] = word[j];
            word[j] = temp;
            i++;
            j--;
        }
        return new String(word);
    }
}
-------------------------------------------------------------------------------------------------------------
5.VALID PALINDROME(LEETCODE NO:125)
public class Solution {
    public boolean isPalindrome(String s) {
        String actual = s.replaceAll("[^A-Za-z0-9]", "").toLowerCase();
        String rev = new StringBuffer(actual).reverse().toString();
        return actual.equals(rev);
    }
}

